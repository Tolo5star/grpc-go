#-*- mode: ruby -*-
#vi: set ft=ruby :

Machines = [
    {
        :name => "master",
        :type => "master",
        :box => "ubuntu/xenial64",
        :box_version => "20190805.0.0",
        :eth1 => "192.168.205.10",
        :mem => "2048",
        :cpu => "2"
    },
    {
        :name => "node1",
        :type => "node",
        :box => "ubuntu/xenial64",
        :box_version => "20190805.0.0",
        :eth1 => "192.168.205.11",
        :mem => "2048",
        :cpu => "2"
    },
    {
        :name => "node2",
        :type => "node",
        :box => "ubuntu/xenial64",
        :box_version => "20190805.0.0",
        :eth1 => "192.168.205.12",
        :mem => "2048",
        :cpu => "2"
    }
]


#from https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
#swap off
#setup docker
#install kubectl ,kubelet and kubeadm on all three machines 

$AllBoxes = <<-SCRIPT
  echo "Running AllBoxes Script"

  sudo apt-get update && apt-get install -y apt-transport-https ca-certificates curl software-properties-common
  swapoff -a
  sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  add-apt-repository "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable"
  apt-get update && apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')
  usermod -aG docker $USER

  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
  deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
  apt-get update
  apt-get install -y kubelet kubeadm kubectl
  apt-mark hold kubelet kubeadm kubectl

  # ip of this box
  IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`
  # set node-ip
  sudo sh -c 'echo KUBELET_EXTRA_ARGS= >> /etc/default/kubelet'
  sudo sed -i "/^[^#]*KUBELET_EXTRA_ARGS=/c\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR" /etc/default/kubelet
  sudo systemctl restart kubelet

SCRIPT

$MasterScript = <<-SCRIPT 
  echo "Running MasterScript"
  # ip of this box
  IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`
  # install k8s master
  HOST_NAME=$(hostname -s)
  kubeadm init --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=172.16.0.0/16
  #copying credentials to regular user - vagrant
  sudo --user=vagrant mkdir -p /home/vagrant/.kube
  cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
  chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config
  # install Calico pod network addon
  export KUBECONFIG=/etc/kubernetes/admin.conf
  kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
  kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml

  kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh
  chmod +x /etc/kubeadm_join_cmd.sh

  #required for setting up password less ssh between guest VMs
  sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
  sudo service sshd restart
SCRIPT

$NodeScript = <<-SCRIPT
  echo "Running NodeScript"
  sudo apt-get install -y sshpass
  sudo sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .
  sh ./kubeadm_join_cmd.sh
SCRIPT

Vagrant.configure("2") do |config|
  Machines.each do |opts|
    config.vm.define opts[:name] do |config|
      
      config.vm.box = opts[:box]
      config.vm.box_version = opts[:box_version]
      config.vm.hostname = opts[:name]
      config.vm.network :private_network, ip: opts[:eth1]

      config.vm.provider "virtualbox" do |v|
        v.name = opts[:name]
        v.customize ["modifyvm", :id, "--groups","/grpc"]
        v.customize ["modifyvm", :id, "--memory",opts[:mem]]
        v.customize ["modifyvm", :id, "--cpus",opts[:cpu]]
      end

      config.vm.provision "shell", inline: $AllBoxes

      if opts[:type] == "master"
        config.vm.provision "shell", inline: $MasterScript
	config.vm.provision "file", source: "Yamls/server_pod.yml", destination: "$HOME/Yamls/server_pod.yml"
	config.vm.provision "file", source: "Yamls/client_pod.yml", destination: "$HOME/Yamls/client_pod.yml"
	config.vm.provision "file", source: "Yamls/server_service.yml", destination: "$HOME/Yamls/server_service.yml"
	config.vm.provision "file", source: "Yamls/server_npservice.yml", destination: "$HOME/Yamls/server_npservice.yml"
      else opts[:type] == "node"
        config.vm.provision "shell", inline: $NodeScript
      end
    
    end

  end

end
